<!DOCTYPE html>
<html>
<head>
	<title>Portfolio</title>
    
	<style>


$screen-sm-min: 860px;
$screen-md-min: 992px;
$screen-lg-min: 1200px;

@mixin breakpoint($point) {
  @if $point == $screen-sm-min {
    @media screen and (min-width: $screen-sm-min) { @content; }
  }
  @elseif $point == $screen-md-min {
    @media screen and (min-width: $screen-md-min) { @content; }
  }
  @elseif $point == $screen-lg-min {
    @media screen and (min-width: $screen-lg-min) { @content; }
  }
}


body {
	position: relative;
	margin: 0;
	overflow: hidden;
}

.intro-container {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	color: white;
	text-align: center;
	margin: 0 auto;
	right: 0;
	left: 0;
}

h1 {
	font-family: 'brandon-grotesque', sans-serif;
	font-weight: bold;
	margin-top: 0px;
	margin-bottom: 0;
	font-size: 20px;

	@include breakpoint($screen-sm-min){
		font-size: 40px;
		line-height: 52px;
	}
}

.fancy-text {
	font-family: "adobe-garamond-pro",sans-serif;
	font-style: italic;
	letter-spacing: 1px;
	margin-bottom: 17px;
}

.button {
	position: relative;
	cursor: pointer;
	display: inline-block;
	font-family: 'brandon-grotesque', sans-serif;
	text-transform: uppercase;
	min-width: 200px;
	margin-top: 30px;

	&:hover {
		.border {
			box-shadow: 0px 0px 10px 0px rgba(255,255,255,1);
			.left-plane, .right-plane {
				transform: translateX(0%);
			}
		}

		.text {
			color: #121212;
		}
	}

	.border {
		border: 1px solid white;
		transform: skewX(-20deg);
		height: 32px;
		border-radius: 3px;
		overflow: hidden;
		position: relative;
		transition: .10s ease-out;

		.left-plane, .right-plane {
			position: absolute;
			background: white;
			height: 32px;
			width: 100px;
			transition: .15s ease-out;
		}

		.left-plane {
			left: 0;
			transform: translateX(-100%);
		}

		.right-plane {
			right: 0;
			transform: translateX(100%);
		}
	}

	.text {
		border: 2px solid white;
        padding: 7px;
		position: absolute;
		left: 0;
		right: 0;
		top: 50%;
		transform: translateY(-50%);
		transition: .15s ease-out;
	}
}

.x-mark {
	right: 10px;
	top: 10px;
	position: absolute;
	cursor: pointer;
	opacity: 0;
	
	:hover {
		.right {
			transform: rotate(-45deg) scaleY(1.2);
		}

		.left {
			transform: rotate(45deg) scaleY(1.2);
		}
	}

	.container {
		position: relative;
		width: 20px;
		height: 20px;
	}

	.left, .right {
		width: 2px;
		height: 20px;
		background: white;
		position: absolute;
		border-radius: 3px;
		transition: .15s ease-out;
		margin: 0 auto;
		left: 0;
		right: 0;
	}

	.right {
		transform: rotate(-45deg);
	}

	.left {
		transform: rotate(45deg);
	}
}

.sky-container {
	position: absolute;
	color: white;
	text-transform: uppercase;
	margin: 0 auto;
	left: 30%;
	top: 10%;
	
	opacity: 0;
	@include breakpoint($screen-sm-min){
		top: 18%;
		right: 12%;
		left: auto;
	}

	&__left, &__right {
		display: inline-block;	
		vertical-align: top;
		font-weight: bold;

		h2 {
			font-family: 'brandon-grotesque', sans-serif;
			font-size: 26px;
			line-height: 26px;
			margin: 0;
			@include breakpoint($screen-sm-min){
				font-size: 72px;
				line-height: 68px;
			}
		}
		
	}

	&__left {
		margin-right: 5px;
	}

	.thirty-one {
		letter-spacing: 4px;
	}

}

.text-right {
	text-align: right;	
}

.text-left {
	text-align: left;
}




.typewriter h1 {
  overflow: hidden; /* Ensures the content is not revealed until the animation */
  border-right: .15em solid orange; /* The typwriter cursor */
  white-space: nowrap; /* Keeps the content on a single line */
  margin: 0 auto; /* Gives that scrolling effect as the typing happens */
  letter-spacing: .15em; /* Adjust as needed */

  animation: 
    typing 5s steps(40, end),
    blink-caret .75s step-end infinite;
   -webkit-animation-delay: 2s; /* Safari 4.0 - 8.0 */
   animation-delay: 2s;
}

/* The typing effect */
@keyframes typing {
  from { width: 0 }
  to { width: 100% }
}

/* The typewriter cursor effect */
@keyframes blink-caret {
  from, to { border-color: transparent }
  50% { border-color: orange; }
}

div.borderYtoX a:before, div.borderYtoX a:after
{
    position: absolute;
    opacity: 0.5;
    height: 100%;
    width: 2px;
    content: '';
    background: orange ;
    transition: all 0.3s;
}

div.borderYtoX a:before
{
    left: 0px;
    top: 0px;
}

div.borderYtoX a:after
{
    right: 0px;
    bottom: 0px;
}

div.borderYtoX a:hover:before, div.borderYtoX a:hover:after
{
    opacity: 1;
    height: 2px;
    width: 100%;
}

div.container
{
    font-family: Raleway;
    margin: 0 auto;
	padding: 10em 3em;
	text-align: center;
	margin-top: -21%;
    margin-left: -19%;
}

div.container a
{
    color: orange ;
    text-decoration: none;
    font: 20px Raleway;
    margin: 0px 10px;
    padding: 10px 10px;
    position: relative;
    z-index: 0;
    cursor: pointer;
}


.wrap {
  position: absolute;
  overflow: hidden;
  top: 10%;
  right: 10%;
  bottom: 85px;
  left: 10%;
  padding: 20px 50px;
  display: block;
  border-radius: 4px;
  transform: translateY(20px);
  transition: all 0.5s;
  visibility: hidden;
}
.wrap .content {
  opacity: 0;
}
.wrap:before {
  position: absolute;
  width: 1px;
  height: 1px;
  background: white;
  content: "";
  bottom: 10px;
  left: 50%;
  top: 95%;
  color: #fff;
  border-radius: 50%;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap.active {
  display: block;
  visibility: visible;
  box-shadow: 2px 3px 16px silver;
  transition: all 600ms;
  transform: translateY(0px);
  transition: all 0.5s;
      margin-top: 14%;
    height: 96%;
    margin-right: 40%;
}
.wrap.active:before {
  height: 2000px;
  width: 2000px;
  border-radius: 50%;
  top: 50%;
  left: 50%;
  margin-left: -1000px;
  margin-top: -1000px;
  display: block;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap.active .content {
  position: relative;
  z-index: 1;
  opacity: 1;
  transition: all 600ms cubic-bezier(0.55, 0.055, 0.675, 0.19);
}

a.button {
  
}
a.button:hover {
  text-decoration: none;
  
}
a.button.active {

 
}


.wrap1 {
  position: absolute;
  overflow: hidden;
  top: 10%;
  right: 10%;
  bottom: 85px;
  left: 10%;
  padding: 20px 50px;
  display: block;
  border-radius: 4px;
  transform: translateY(20px);
  transition: all 0.5s;
  visibility: hidden;
}
.wrap1 .content1 {
  opacity: 0;
}
.wrap1:before {
  position: absolute;
  width: 1px;
  height: 1px;
  background: white;
  content: "";
  bottom: 10px;
  left: 50%;
  top: 95%;
  color: #fff;
  border-radius: 50%;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap1.active {
  display: block;
  visibility: visible;
  box-shadow: 2px 3px 16px silver;
  transition: all 600ms;
  transform: translateY(0px);
  transition: all 0.5s;
      margin-top: 10%;
    height: 156%;
    width: 52%;
    margin-right: 40%;
}
.wrap1.active:before {
  height: 2000px;
  width: 2000px;
  border-radius: 50%;
  top: 50%;
  left: 50%;
  margin-left: -1000px;
  margin-top: -1000px;
  display: block;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap1.active .content1 {
  position: relative;
  z-index: 1;
  opacity: 1;
  transition: all 600ms cubic-bezier(0.55, 0.055, 0.675, 0.19);
}





.wrap2 {
  position: absolute;
  overflow: hidden;
  top: 10%;
  right: 10%;
  bottom: 85px;
  left: 10%;
  padding: 20px 50px;
  display: block;
  border-radius: 4px;
  transform: translateY(20px);
  transition: all 0.5s;
  visibility: hidden;
}
.wrap2 .content2 {
  opacity: 0;
}
.wrap2:before {
  position: absolute;
  width: 1px;
  height: 1px;
  background: white;
  content: "";
  bottom: 10px;
  left: 50%;
  top: 95%;
  color: #fff;
  border-radius: 50%;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap2.active {
  display: block;
  visibility: visible;
  box-shadow: 2px 3px 16px silver;
  transition: all 600ms;
  transform: translateY(0px);
  transition: all 0.5s;
      margin-top: 10%;
   height: 241%;
    width: 58%;
    margin-left: -8%;
    margin-right: 40%;
    overflow: scroll;
}
.wrap2.active:before {
  height: 2000px;
  width: 2000px;
  border-radius: 50%;
  top: 50%;
  left: 50%;
  margin-left: -1000px;
  margin-top: -1000px;
  display: block;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap2.active .content2 {
  position: relative;
  z-index: 1;
  opacity: 1;
  transition: all 600ms cubic-bezier(0.55, 0.055, 0.675, 0.19);
}



.wrap3 {
  position: absolute;
  overflow: hidden;
  top: 10%;
  right: 10%;
  bottom: 85px;
  left: 10%;
  padding: 20px 50px;
  display: block;
  border-radius: 4px;
  transform: translateY(20px);
  transition: all 0.5s;
  visibility: hidden;
}
.wrap3 .content3 {
  opacity: 0;
}
.wrap3:before {
  position: absolute;
  width: 1px;
  height: 1px;
  background: white;
  content: "";
  bottom: 10px;
  left: 50%;
  top: 95%;
  color: #fff;
  border-radius: 50%;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap3.active {
  display: block;
  visibility: visible;
  box-shadow: 2px 3px 16px silver;
  transition: all 600ms;
  transform: translateY(0px);
  transition: all 0.5s;
      margin-top: 8%;
    height: 267%;
    width: 76%;
        margin-left: -13%;
    margin-right: 40%;
}
.wrap3.active:before {
  height: 2000px;
  width: 2000px;
  border-radius: 50%;
  top: 50%;
  left: 50%;
  margin-left: -1000px;
  margin-top: -1000px;
  display: block;
  -webkit-transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
  transition: all 600ms cubic-bezier(0.215, 0.61, 0.355, 1);
}
.wrap3.active .content3 {
  position: relative;
  z-index: 1;
  opacity: 1;
  transition: all 600ms cubic-bezier(0.55, 0.055, 0.675, 0.19);
}

    </style>
</head>

<body>
	<!-- This pen isn't a fan of small view heights, check it out in  fullpage view for optimal viewing	 -->
	<div class="intro-container">
		<div class="typewriter">
  			<h1><span style="color: orange ;">I'm Sagarpreet Chadha .</span></h1>
		</div>
		<h1>Delhi Technological<br> University </h1>

		<div class="button shift-camera-button">
			<div class="border">
				<div class="left-plane"></div>
				<div class="right-plane"></div>
			</div>
			<br>
			<button type="button" class="btn btn-warning">TO RESUME</button>	
			
		
		</div>
	</div>
	<div class="sky-container">
		<div style="padding-left: 97%;"> 
		<a id="home_button" title="Back" style="color:red ;" href=""><strong>X</strong></a>
		</div>
		<div class="container teal borderYtoX">
 			  
			  <a class="button" id="education">EDUCATION</a>
			  <a class="button" id="achievement">ACHIEVEMENTS</a>
			  <a class="button" id="projects">PROJECTS</a>
			  <a class="button" id="contact">CONTACT</a>
		</div>
		<div class='wrap'>
  				<div class='content'>
  					&nbsp; &nbsp; &nbsp; &nbsp; 
 		   			<a href="https://twitter.com/Sagarpreet_07" ><i class="fa fa-twitter-square fa-3x" aria-hidden="true" style="color: whitesmoke ; background-color: aqua;"></i></a>
 		   			&nbsp; &nbsp; 
 		   			<a href="https://github.com/sagarpreet-chadha"><i class="fa fa-github-square fa-3x" aria-hidden="true" style="background-color: black;color: whitesmoke ;"></i></a>
 		   			&nbsp; &nbsp; 
 		   			<a href="https://www.facebook.com/sagarpreet.chadha"><i class="fa fa-facebook-square fa-3x" aria-hidden="true" style="color: whitesmoke ;background-color: #4267b2;"></i></a>
 		   			<br>
 		   			<br>
 		   			<strong style="color: black;">chadha.sagarpreet97@gmail.com</strong>
				</div>
		</div>

		<div class='wrap1'>
  				<div class='content1'>
  					<p style="color: black ;">
  						<strong>Delhi Technological University India - 2015-present</strong><br>
Bachelor of Technology<br>
Course in Information Technology ( IT ) CGPA: 8.56<br><br><br>
<strong>Lancers Convent School , India</strong><br> Passed with 95.6 % in CBSE (year - 2015)<br>

  					</p>
				</div>
			</div>

			<div class='wrap2'>
  				<div class='content2'>
  					<p style="color: black ;">
  						
1.) <strong>Departmental Rank 3</strong> in College ( 2nd semester )<br>
2.) CodeChef May <strong>Cook-Off</strong> 2017 : <strong>Global Rank 180</strong> .<br>
3.) <strong>World Food Hackathon</strong>(organised by Government of India)Position in <strong>TOP 10</strong><br>
4.) HACK-IIITD Hackathon ( organised by IIIT-DELHI ) : <strong>Position : 15</strong><br>
5.) Position in Top 10 in HACK-DTU Hackathon ( organised in DTU , Delhi) .<br>
6.) Elected <strong>Class Representative</strong> in College , 2nd year .<br>
7.) Successfully completed Data structures and Algorithms , Android Development Course and Alchemy (Web Development using Ruby on Rails) course from Coding Ninjas , India .
<br>
  					</p>
				</div>
			</div>

			<div class='wrap3'>
  				<div class='content3'>
  					<p style="color: black ;">
<strong>DCE Speaks Up (Android Application)</strong><br>
An Android app helping students to get latest important information / circulars related to college . Use of API to get dates of all Competitive Programming contests . Available on Google Play Store .
<br> <a href="https://play.google.com/store/apps/details?id=thuglife.dcespeaksup&hl=en">https://play.google.com/store/apps/details?id=thuglife.dcespeaksup&hl=en</a><br><br>
<strong>DTU MESS (Android Application)</strong><br>
An android app to get the menu of the day in various canteens across college . Available on Google Play Store with approximately 1000 downloads . <br><a href="https://play.google.com/store/apps/details?id=chadhasagarpreet.dtumess&hl=en">https://play.google.com/store/apps/details?id=chadhasagarpreet.dtumess&hl=en</a><br><br>
<strong>OTHER PROJECTS :</strong> <a href="https://github.com/sagarpreet-chadha">https://github.com/sagarpreet-chadha</a>
<br>
  					</p>
				</div>
			</div>

	</div>
	<script>
		$("#home_button").click(
			function () {
      		  // alert("Hello!");
       			location.reload() ;
    	}
		);

		$('#contact').on('click', function(){
 			 $('.wrap, a').toggleClass('active');
  			return false;
		});

		$('#education').on('click', function(){
 			 $('.wrap1, a').toggleClass('active');
  			return false;
		});

		$('#achievement').on('click', function(){
 			 $('.wrap2, a').toggleClass('active');
  			return false;
		});
		$('#projects').on('click', function(){
 			 $('.wrap3, a').toggleClass('active');
  			return false;
		});
	</script>
<!-- Social -->

<script type='text/javascript' > 
  var THREE, $, TweenLite, Power3, TimelineMax ;
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/88/three.js"> </script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/TweenMax.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.3/TweenLite.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.3/TimelineMax.min.js"></script>
<script>
	"use strict";
/* globals THREE, $, TweenLite, Power3, TimelineMax  */

 let camera , scene, renderer;
 let plane;
let raycaster = new THREE.Raycaster();
let normalizedMouse = {
	x: 0,
	y: -180
};

// let lightBlue = {
// 	r: 34,
// 	g: 183,
// 	b: 236
// };

let darkBlue = {
	r: 0,
	g: 52,
	b: 74
};

let baseColorRGB = darkBlue;
let baseColor = "rgb(" + baseColorRGB.r + "," + baseColorRGB.g + "," + baseColorRGB.b + ")";
let nearStars, farStars, farthestStars;


function init() {
	scene = new THREE.Scene();
	camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );
	renderer = new THREE.WebGLRenderer();



	// Scene initialization
	camera.position.z = 50;
	

	renderer.setClearColor( "#121212", 1.0);
	renderer.setSize( window.innerWidth, window.innerHeight );
	renderer.setPixelRatio( window.devicePixelRatio );

	document.body.appendChild( renderer.domElement );

	// Lights
	let topLight = new THREE.DirectionalLight(0xffffff, 1);
	topLight.position.set(0,1,1).normalize();
	scene.add(topLight);

	let bottomLight = new THREE.DirectionalLight(0xffffff, 0.4);
	bottomLight.position.set(1,-1,1).normalize();
	scene.add(bottomLight);

	let skyLightRight = new THREE.DirectionalLight(0x666666, 0.2);
	skyLightRight.position.set(-1,-1,0.2).normalize();
	scene.add(skyLightRight);

	let skyLightCenter = new THREE.DirectionalLight(0x666666, 0.2);
	skyLightCenter.position.set(-0,-1,0.2).normalize();
	scene.add(skyLightCenter);

	let skyLightLeft = new THREE.DirectionalLight(0x666666, 0.2);
	skyLightLeft.position.set(1,-1,0.2).normalize();
	scene.add(skyLightLeft);



	// Mesh creation
	let geometry = new THREE.PlaneGeometry(400, 400, 70, 70);
	let darkBlueMaterial = new THREE.MeshPhongMaterial( { color: 0xffffff, shading: THREE.FlatShading, side: THREE.DoubleSide, vertexColors: THREE.FaceColors} );

	geometry.vertices.forEach(function(vertice) {
		vertice.x += (Math.random() - 0.5) * 4;
		vertice.y += (Math.random() - 0.5) * 4;
		vertice.z += (Math.random() - 0.5) * 4;
		vertice.dx = Math.random() - 0.5;
		vertice.dy = Math.random() - 0.5;
		vertice.randomDelay = Math.random() * 5;
	});

	for ( var i = 0; i < geometry.faces.length; i ++ ) {
	    geometry.faces[ i ].color.setStyle( baseColor );
		geometry.faces[ i ].baseColor =  baseColorRGB;    
	}


	plane = new THREE.Mesh( geometry, darkBlueMaterial );
	scene.add( plane );



	// Create stars 
	farthestStars = createStars(1200, 420, "#0952BD");
	farStars = createStars(1200, 370, "#A5BFF0");
	nearStars = createStars(1200, 290,"#118CD6");

	scene.add(farthestStars);
	scene.add(farStars);
	scene.add(nearStars);

	farStars.rotation.x = 0.25; 
	nearStars.rotation.x = 0.25; 

	// Uncomment for testing second camera position
	// camera.rotation.x = Math.PI / 2;
	// camera.position.y = -0;
	// camera.position.z = 20;
	// plane.scale.x = 2;

}


function createStars(amount, yDistance, color = "0x000000") {
	let opacity = Math.random();
	let starGeometry = new THREE.Geometry();
	let starMaterial = new THREE.PointsMaterial({color: color, opacity: opacity});

	for (let i = 0; i < amount; i++) {
		let vertex = new THREE.Vector3();
        vertex.z = (Math.random() - 0.5) * 1500;
        vertex.y = yDistance;
        vertex.x = (Math.random() - 0.5) * 1500;

        starGeometry.vertices.push(vertex);
	}	


    return new THREE.Points(starGeometry, starMaterial);
}


let timer = 0;


function render() {
	requestAnimationFrame( render );


	timer += 0.01;
	let vertices = plane.geometry.vertices;

	for (let i = 0; i < vertices.length; i++) {
		// Ease back to original vertice position while still maintaining sine wave
		vertices[i].x -= (Math.sin(timer + vertices[i].randomDelay) / 40) * vertices[i].dx;
		vertices[i].y += (Math.sin(timer + vertices[i].randomDelay) / 40) * vertices[i].dy;
		// ((vertices[i].x - vertices[i].originalPosition.x) * 0.1) + 
	}

	// Determine where ray is being projected from camera view
	raycaster.setFromCamera(normalizedMouse, camera);

	// Send objects being intersected into a variable
	let intersects = raycaster.intersectObjects([plane]);

	if (intersects.length > 0) {

			let faceBaseColor = intersects[0].face.baseColor;

			plane.geometry.faces.forEach(function(face) {
				face.color.r *= 255;
				face.color.g *= 255;
				face.color.b *= 255;

				face.color.r += (faceBaseColor.r - face.color.r) * 0.01;
				face.color.g += (faceBaseColor.g - face.color.g) * 0.01;
				face.color.b += (faceBaseColor.b - face.color.b) * 0.01;

				let rInt = Math.floor(face.color.r);
				let gInt = Math.floor(face.color.g);
				let bInt = Math.floor(face.color.b);

				let newBasecol = "rgb(" + rInt + "," + gInt + "," + bInt + ")";
				face.color.setStyle(newBasecol);
			});
			plane.geometry.colorsNeedUpdate = true;

			intersects[0].face.color.setStyle("#006ea0");
			plane.geometry.colorsNeedUpdate = true;

	}

		

	plane.geometry.verticesNeedUpdate = true;
	plane.geometry.elementsNeedUpdate = true;

	farthestStars.rotation.y -= 0.00001;
	farStars.rotation.y -= 0.00005;
	nearStars.rotation.y -= 0.00011;


	renderer.render(scene, camera);
}

init();

window.addEventListener("resize", function() {

	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();
	renderer.setSize( window.innerWidth, window.innerHeight );

});

window.addEventListener("mousemove", function(event) {

	// Normalize mouse coordinates
	normalizedMouse.x = (event.clientX / window.innerWidth) * 2 - 1;	
	normalizedMouse.y = -(event.clientY / window.innerHeight) * 2 + 1;	

});

let introContainer = $('.intro-container');
let skyContainer = $('.sky-container');
let xMark = $('.x-mark');


$('.shift-camera-button').click(function() {
	let introTimeline = new TimelineMax();

	introTimeline.add([
		TweenLite.fromTo(introContainer, 0.5, {opacity: 1}, {opacity: 0, ease: Power3.easeIn}),
		TweenLite.to(camera.rotation, 3, {x: Math.PI / 2, ease: Power3.easeInOut}),
		TweenLite.to(camera.position, 2.5, {z: 20, ease: Power3.easeInOut}),
		TweenLite.to(camera.position, 3, {y: 120, ease: Power3.easeInOut}),
		TweenLite.to(plane.scale, 3, {x: 2, ease: Power3.easeInOut}),
	]);

	introTimeline.add([
		TweenLite.to(xMark, 2, {opacity: 1, ease: Power3.easeInOut}),
		TweenLite.to(skyContainer, 2, {opacity: 1, ease: Power3.easeInOut})
	]);
});


$('.x-mark').click(function() {
	let outroTimeline = new TimelineMax();
	
	outroTimeline.add([
		TweenLite.to(xMark, 0.5, {opacity: 0, ease: Power3.easeInOut}),
		TweenLite.to(skyContainer, 0.5, {opacity: 0, ease: Power3.easeInOut}),
		TweenLite.to(camera.rotation, 3, {x: 0, ease: Power3.easeInOut}),
		TweenLite.to(camera.position, 3, {z: 50, ease: Power3.easeInOut}),
		TweenLite.to(camera.position, 2.5, {y: 0, ease: Power3.easeInOut}),
		TweenLite.to(plane.scale, 3, {x: 1, ease: Power3.easeInOut}),
	]);

	outroTimeline.add([
		TweenLite.to(introContainer, 0.5, {opacity: 1, ease: Power3.easeIn}),
	]);
});

render();
</script>


</body>
</html>